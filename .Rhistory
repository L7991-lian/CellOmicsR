# 创建测试数据
my_data <- data.frame(
Group1 = rep(c("A", "B", "C"), each = 4),
Group2 = rep(c("X", "Y", "Z", "W"), 3),
Value = c(10, 15, 8, 6, 5, 7, 12, 9, 3, 6, 4, 11)
)
# 调用函数绘制堆积柱状图
plot_stacked_bar(data=my_data, x_col="Group1", stack_col="Value", fill_col="Group2")
plot_stacked_bar <- function(data, x_col, stack_col, fill_col) {
require(ggplot2)
# Group the data by the specified columns
grouped_data <- aggregate(data[[stack_col]], by=list(data[[x_col]], data[[fill_col]]), FUN=sum)
# Rename the columns
colnames(grouped_data) <- c(x_col, stack_col, fill_col)
# Set the colors for each fill group
num_groups <- length(unique(data[[fill_col]]))
colors <- rainbow(num_groups)
# Plot the stacked bar chart
ggplot(grouped_data, aes(x=x_col, y=stack_col, fill=fill_col)) +
geom_bar(stat="identity", position="stack") +
scale_fill_manual(values=colors) +
theme_classic() +
labs(x=NULL, y=stack_col, fill=fill_col)
}
# 创建测试数据
my_data <- data.frame(
Group1 = rep(c("A", "B", "C"), each = 4),
Group2 = rep(c("X", "Y", "Z", "W"), 3),
Value = c(10, 15, 8, 6, 5, 7, 12, 9, 3, 6, 4, 11)
)
# 调用函数绘制堆积柱状图
plot_stacked_bar(data=my_data, x_col="Group1", stack_col="Value", fill_col="Group2")
# 创建测试数据
cell_data <- data.frame(
Sample = rep(c("Sample1", "Sample2", "Sample3"), each = 4),
Type = rep(c("Type1", "Type2", "Type3", "Type4"), 3),
Count = c(10, 15, 8, 6, 5, 7, 12, 9, 3, 6, 4, 11)
)
# 调用函数绘制堆积柱形图
plot_stacked_bar(data=cell_data, x_col="Sample", stack_col="Count", fill_col="Type")
# 创建测试数据
cell_data <- data.frame(
Sample = rep(c("Sample1", "Sample2", "Sample3"), each = 4),
Type = rep(c("Type1", "Type2", "Type3", "Type4"), 3),
Count = c(10, 15, 8, 6, 5, 7, 12, 9, 3, 6, 4, 11)
)
# 对数据进行整理
formatted_data <- cell_data %>%
group_by(Sample) %>%
mutate(Total = sum(Count)) %>%
mutate(Percentage = Count / Total * 100)
# 绘制堆积柱形图
ggplot(formatted_data, aes(x=Sample, y=Count, fill=Type)) +
geom_bar(stat="identity", position="stack") +
labs(x="Sample", y="Count", fill="Type", title="Cell Type Distribution") +
theme_minimal()
library(tidyverse)
# 创建测试数据
cell_data <- data.frame(
Sample = rep(c("Sample1", "Sample2", "Sample3"), each = 4),
Type = rep(c("Type1", "Type2", "Type3", "Type4"), 3),
Count = c(10, 15, 8, 6, 5, 7, 12, 9, 3, 6, 4, 11)
)
# 对数据进行整理
formatted_data <- cell_data %>%
group_by(Sample) %>%
mutate(Total = sum(Count)) %>%
mutate(Percentage = Count / Total * 100)
# 绘制堆积柱形图
ggplot(formatted_data, aes(x=Sample, y=Count, fill=Type)) +
geom_bar(stat="identity", position="stack") +
labs(x="Sample", y="Count", fill="Type", title="Cell Type Distribution") +
theme_minimal()
###########
library(ggplot2)
plot_stacked_bar <- function(data, x_col, stack_col, fill_col) {
# 对数据进行整理和计算比例
formatted_data <- data %>%
group_by({{ x_col }}) %>%
mutate(Total = sum({{ stack_col }})) %>%
mutate(Percentage = {{ stack_col }} / Total * 100)
# 使用 "nature" 配色方案
colors <- c("#0072B2", "#009E73", "#F0E442", "#D55E00")
# 绘制堆积柱形图
p <- ggplot(formatted_data, aes({{ x_col }}, {{ stack_col }}, fill = {{ fill_col }})) +
geom_bar(stat="identity", position="stack", color="white") +
scale_fill_manual(values = colors, guide = FALSE) +
labs(x = as_label(enquo(x_col)), y = as_label(enquo(stack_col)), fill = as_label(enquo(fill_col))) +
theme_minimal() +
theme(panel.grid = element_blank())
return(p)
}
# 创建测试数据
cell_data <- data.frame(
Sample = rep(c("Sample1", "Sample2", "Sample3"), each = 4),
Type = rep(c("Type1", "Type2", "Type3", "Type4"), 3),
Count = c(10, 15, 8, 6, 5, 7, 12, 9, 3, 6, 4, 11)
)
# 调用函数绘制堆积柱形图
plot_stacked_bar(data = cell_data, x_col = Sample, stack_col = Count, fill_col = Type)
plot_stacked_bar <- function(data, x_col, stack_col, fill_col) {
# 对数据进行整理和计算比例
formatted_data <- data %>%
group_by({{ x_col }}) %>%
mutate(Total = sum({{ stack_col }})) %>%
mutate(Percentage = {{ stack_col }} / Total * 100)
# 使用 "nature" 配色方案
colors <- c("#0072B2", "#009E73", "#F0E442", "#D55E00")
# 绘制堆积柱形图
p <- ggplot(formatted_data, aes({{ x_col }}, {{ stack_col }}, fill = {{ fill_col }})) +
geom_bar(stat="identity", position="stack", color="white") +
scale_fill_manual(values = colors, guide = FALSE) +
labs(x = as_label(enquo(x_col)), y = as_label(enquo(stack_col)), fill = as_label(enquo(fill_col))) +
theme_minimal() +
theme(panel.grid = element_blank(),
text = element_text(size = 18))
return(p)
}
# 创建测试数据
cell_data <- data.frame(
Sample = rep(c("Sample1", "Sample2", "Sample3"), each = 4),
Type = rep(c("Type1", "Type2", "Type3", "Type4"), 3),
Count = c(10, 15, 8, 6, 5, 7, 12, 9, 3, 6, 4, 11)
)
# 调用函数绘制堆积柱形图
plot_stacked_bar(data = cell_data, x_col = Sample, stack_col = Count, fill_col = Type)
plot_stacked_bar <- function(data, x_col, stack_col, fill_col) {
# 对数据进行整理和计算比例
formatted_data <- data %>%
group_by({{ x_col }}) %>%
mutate(Total = sum({{ stack_col }})) %>%
mutate(Percentage = {{ stack_col }} / Total * 100)
# 使用 "nature" 配色方案
colors <- c("#0072B2", "#009E73", "#F0E442", "#D55E00")
# 绘制堆积柱形图
# p <- ggplot(formatted_data, aes({{ x_col }}, {{ stack_col }}, fill = {{ fill_col }})) +
#   geom_bar(stat="identity", position="stack", color="white") +
#   scale_fill_manual(values = colors, guide = FALSE) +
#   labs(x = as_label(enquo(x_col)), y = as_label(enquo(stack_col)), fill = as_label(enquo(fill_col))) +
#   theme_minimal() +
#   theme(panel.grid = element_blank(),
#         text = element_text(size = 18))
# 绘制堆积柱形图
p <- ggplot(formatted_data, aes({{ x_col }}, {{ stack_col }}, fill = {{ fill_col }}, group = {{ fill_col }})) +
geom_bar(stat = "identity", position = "stack", color = "white") +
scale_fill_manual(values = colors, guide = "none") +
labs(x = as_label(enquo(x_col)), y = as_label(enquo(stack_col)), fill = "Cell Type") +
theme_minimal() +
theme(panel.grid = element_blank(),
text = element_text(size = 18))
return(p)
return(p)
}
# 创建测试数据
cell_data <- data.frame(
Sample = rep(c("Sample1", "Sample2", "Sample3"), each = 4),
Type = rep(c("Type1", "Type2", "Type3", "Type4"), 3),
Count = c(10, 15, 8, 6, 5, 7, 12, 9, 3, 6, 4, 11)
)
# 调用函数绘制堆积柱形图
plot_stacked_bar(data = cell_data, x_col = Sample, stack_col = Count, fill_col = Type)
plot_stacked_bar <- function(data, x_col, stack_col, fill_col) {
# 对数据进行整理和计算比例
formatted_data <- data %>%
group_by({{ x_col }}) %>%
mutate(Total = sum({{ stack_col }})) %>%
mutate(Percentage = {{ stack_col }} / Total * 100)
# 使用 "nature" 配色方案
colors <- c("#0072B2", "#009E73", "#F0E442", "#D55E00")
# 绘制堆积柱形图
p <- ggplot(formatted_data, aes({{ x_col }}, {{ stack_col }}, fill = {{ fill_col }}, group = {{ fill_col }})) +
geom_bar(stat = "identity", position = "stack", color = "white") +
scale_fill_manual(values = colors, guide = "none") +
labs(x = as_label(enquo(x_col)), y = as_label(enquo(stack_col)), fill = "Cell Type") +
theme_minimal() +
theme(panel.grid = element_blank(),
text = element_text(size = 18))
return(p)
return(p)
}
# 创建测试数据
cell_data <- data.frame(
Sample = rep(c("Sample1", "Sample2", "Sample3"), each = 4),
Type = rep(c("Type1", "Type2", "Type3", "Type4"), 3),
Count = c(10, 15, 8, 6, 5, 7, 12, 9, 3, 6, 4, 11)
)
# 调用函数绘制堆积柱形图
plot_stacked_bar(data = cell_data, x_col = Sample, stack_col = Count, fill_col = Type)
library(tidyverse)
load_all()
??load_all
devtools::load_all()
exists("plot_stacked_bar", where = globalenv(), inherits = FALSE)
setwd("/data2/jinlianli/CellOmicsR/CellOmicsR/")
devtools::load_all()
exists("plot_stacked_bar", where = globalenv(), inherits = FALSE)
check()
??check
?check
devtools::check()
?use_package
usethis::use_package("ggplot2")
usethis::use_package("tidyverse")
usethis::use_package("tidyverse", type = "depends")
plot_stacked_bar <- function(data, x_col, stack_col, fill_col) {
# 对数据进行整理和计算比例
formatted_data <- data %>%
group_by({{ x_col }}) %>%
mutate(Total = sum({{ stack_col }})) %>%
mutate(Percentage = {{ stack_col }} / Total * 100)
# 配色方案
colors <- c("#0072B2", "#009E73", "#F0E442", "#D55E00")
# 绘制堆积柱形图
p <- ggplot(formatted_data, aes({{ x_col }}, {{ stack_col }}, fill = {{ fill_col }}, group = {{ fill_col }})) +
geom_bar(stat = "identity", position = "stack", color = "white") +
scale_fill_manual(values = colors, guide = "none") +
labs(x = as_label(enquo(x_col)), y = as_label(enquo(stack_col)), fill = "Cell Type") +
theme_minimal() +
theme(panel.grid = element_blank(),
text = element_text(size = 18))
return(p)
}
cell_data <- data.frame(
Sample = rep(c("Sample1", "Sample2", "Sample3"), each = 4),
Type = rep(c("Type1", "Type2", "Type3", "Type4"), 3),
Count = c(10, 15, 8, 6, 5, 7, 12, 9, 3, 6, 4, 11)
)
plot_stacked_bar(data = cell_data, x_col = Sample, stack_col = Count, fill_col = Type)
plot_stacked_bar <- function(data, x_col, stack_col, fill_col) {
# 对数据进行整理和计算比例
formatted_data <- data %>%
group_by({{ x_col }}) %>%
mutate(Total = sum({{ stack_col }})) %>%
mutate(Percentage = {{ stack_col }} / Total * 100)
# 配色方案
colors <- c("#0072B2", "#009E73", "#F0E442", "#D55E00")
# 绘制堆积柱形图
p <- ggplot(formatted_data, aes({{ x_col }}, {{ stack_col }}, fill = {{ fill_col }}, group = {{ fill_col }})) +
geom_bar(stat = "identity", position = "stack", color = "white") +
scale_fill_manual(values = colors, guide = "none") +
labs(x = as_label(enquo(x_col)), y = as_label(enquo(stack_col)), fill = "Cell Type") +
theme(panel.grid = element_blank(),
text = element_text(size = 18))
return(p)
}
cell_data <- data.frame(
Sample = rep(c("Sample1", "Sample2", "Sample3"), each = 4),
Type = rep(c("Type1", "Type2", "Type3", "Type4"), 3),
Count = c(10, 15, 8, 6, 5, 7, 12, 9, 3, 6, 4, 11)
)
plot_stacked_bar(data = cell_data, x_col = Sample, stack_col = Count, fill_col = Type)
plot_stacked_bar <- function(data, x_col, stack_col, fill_col) {
# 对数据进行整理和计算比例
formatted_data <- data %>%
group_by({{ x_col }}) %>%
mutate(Total = sum({{ stack_col }})) %>%
mutate(Percentage = {{ stack_col }} / Total * 100)
# 配色方案
colors <- c("#0072B2", "#009E73", "#F0E442", "#D55E00")
# 绘制堆积柱形图
p <- ggplot(formatted_data, aes({{ x_col }}, {{ stack_col }}, fill = {{ fill_col }}, group = {{ fill_col }})) +
geom_bar(stat = "identity", position = "stack", color = "white") +
scale_fill_manual(values = colors, guide = "none") +
labs(x = as_label(enquo(x_col)), y = as_label(enquo(stack_col)), fill = "Cell Type") +
theme_bw()+
theme(panel.grid = element_blank(),
text = element_text(size = 18))
return(p)
}
cell_data <- data.frame(
Sample = rep(c("Sample1", "Sample2", "Sample3"), each = 4),
Type = rep(c("Type1", "Type2", "Type3", "Type4"), 3),
Count = c(10, 15, 8, 6, 5, 7, 12, 9, 3, 6, 4, 11)
)
plot_stacked_bar(data = cell_data, x_col = Sample, stack_col = Count, fill_col = Type)
plot_stacked_bar <- function(data, x_col, stack_col, fill_col) {
# 对数据进行整理和计算比例
formatted_data <- data %>%
group_by({{ x_col }}) %>%
mutate(Total = sum({{ stack_col }})) %>%
mutate(Percentage = {{ stack_col }} / Total * 100)
# 配色方案
colors <- c("#0072B2", "#009E73", "#F0E442", "#D55E00")
# 绘制堆积柱形图
p <- ggplot(formatted_data, aes({{ x_col }}, {{ stack_col }}, fill = {{ fill_col }}, group = {{ fill_col }})) +
geom_bar(stat = "identity", position = "stack", color = "white") +
scale_fill_manual(values = colors, guide = "none") +
labs(x = as_label(enquo(x_col)), y = as_label(enquo(stack_col)), fill = "Cell Type") +
theme_light()+
theme(panel.grid = element_blank(),
text = element_text(size = 18))
return(p)
}
cell_data <- data.frame(
Sample = rep(c("Sample1", "Sample2", "Sample3"), each = 4),
Type = rep(c("Type1", "Type2", "Type3", "Type4"), 3),
Count = c(10, 15, 8, 6, 5, 7, 12, 9, 3, 6, 4, 11)
)
plot_stacked_bar(data = cell_data, x_col = Sample, stack_col = Count, fill_col = Type)
plot_stacked_bar <- function(data, x_col, stack_col, fill_col) {
# 对数据进行整理和计算比例
formatted_data <- data %>%
group_by({{ x_col }}) %>%
mutate(Total = sum({{ stack_col }})) %>%
mutate(Percentage = {{ stack_col }} / Total * 100)
# 配色方案
colors <- c("#0072B2", "#009E73", "#F0E442", "#D55E00")
# 绘制堆积柱形图
p <- ggplot(formatted_data, aes({{ x_col }}, {{ stack_col }}, fill = {{ fill_col }}, group = {{ fill_col }})) +
geom_bar(stat = "identity", position = "stack", color = "white") +
scale_fill_manual(values = colors, guide = "none") +
labs(x = as_label(enquo(x_col)), y = as_label(enquo(stack_col)), fill = "Cell Type") +
theme_set()+
theme(panel.grid = element_blank(),
text = element_text(size = 18))
return(p)
}
cell_data <- data.frame(
Sample = rep(c("Sample1", "Sample2", "Sample3"), each = 4),
Type = rep(c("Type1", "Type2", "Type3", "Type4"), 3),
Count = c(10, 15, 8, 6, 5, 7, 12, 9, 3, 6, 4, 11)
)
plot_stacked_bar(data = cell_data, x_col = Sample, stack_col = Count, fill_col = Type)
plot_stacked_bar <- function(data, x_col, stack_col, fill_col) {
# 对数据进行整理和计算比例
formatted_data <- data %>%
group_by({{ x_col }}) %>%
mutate(Total = sum({{ stack_col }})) %>%
mutate(Percentage = {{ stack_col }} / Total * 100)
# 配色方案
colors <- c("#0072B2", "#009E73", "#F0E442", "#D55E00")
# 绘制堆积柱形图
p <- ggplot(formatted_data, aes({{ x_col }}, {{ stack_col }}, fill = {{ fill_col }}, group = {{ fill_col }})) +
geom_bar(stat = "identity", position = "stack", color = "white") +
scale_fill_manual(values = colors, guide = "none") +
labs(x = as_label(enquo(x_col)), y = as_label(enquo(stack_col)), fill = "Cell Type") +
theme_minimal()+
theme(panel.grid = element_blank(),
text = element_text(size = 18))
return(p)
}
cell_data <- data.frame(
Sample = rep(c("Sample1", "Sample2", "Sample3"), each = 4),
Type = rep(c("Type1", "Type2", "Type3", "Type4"), 3),
Count = c(10, 15, 8, 6, 5, 7, 12, 9, 3, 6, 4, 11)
)
plot_stacked_bar(data = cell_data, x_col = Sample, stack_col = Count, fill_col = Type)
devtools::check()
devtools::check()
??document
?document
devtools::document()
rm(list = c("plot_stacked_bar"))
rm(cell_data)
gc()
devtools::document()
?plot_stacked_bar
devtools::check()
plot_stacked_bar
cell_data <- data.frame( Sample = rep(c("Sample1", "Sample2", "Sample3"), each = 4),Type = rep(c("Type1", "Type2", "Type3", "Type4"), 3),Count = c(10, 15, 8, 6, 5, 7, 12, 9, 3, 6, 4, 11))
plot_stacked_bar(data = cell_data, x_col = Sample, stack_col = Count, fill_col = Type)
use_testthat()
?use_testthat
usethis::use_testthat()
usethis::use_test("plot_stacked_bar")
devtools::check()
setwd("./docs/")
cell_data <- data.frame( Sample = rep(c("Sample1", "Sample2", "Sample3"), each = 4),Type = rep(c("Type1", "Type2", "Type3", "Type4"), 3),Count = c(10, 15, 8, 6, 5, 7, 12, 9, 3, 6, 4, 11))
plot_stacked_bar <- function(data, x_col, stack_col, fill_col) {
# 对数据进行整理和计算比例
formatted_data <- data %>%
group_by({{ x_col }}) %>%
mutate(Total = sum({{ stack_col }})) %>%
mutate(Percentage = {{ stack_col }} / Total * 100)
# 配色方案
colors <- c("#0072B2", "#009E73", "#F0E442", "#D55E00")
# 绘制堆积柱形图
p <- ggplot(formatted_data, aes({{ x_col }}, {{ stack_col }}, fill = {{ fill_col }}, group = {{ fill_col }})) +
geom_bar(stat = "identity", position = "stack", color = "white") +
scale_fill_manual(values = colors, guide = "none") +
labs(x = as_label(enquo(x_col)), y = as_label(enquo(stack_col)), fill = "Cell Type") +
theme_minimal()+
theme(panel.grid = element_blank(),
text = element_text(size = 18))
return(p)
}
plot_stacked_bar(data = cell_data, x_col = Sample, stack_col = Count, fill_col = Type)
setwd("./Readme_figures/")
ggsave("stack_bar.plot.png", plot_stacked_bar(data = cell_data, x_col = Sample, stack_col = Count, fill_col = Type), width = 6, height = 6)
plot_stacked_bar <- function(data, x_col, stack_col, fill_col) {
# 对数据进行整理和计算比例
formatted_data <- data %>%
group_by({{ x_col }}) %>%
mutate(Total = sum({{ stack_col }})) %>%
mutate(Percentage = {{ stack_col }} / Total * 100)
# 配色方案
colors <- c("#0072B2", "#009E73", "#F0E442", "#D55E00")
# 绘制堆积柱形图
p <- ggplot(formatted_data, aes({{ x_col }}, {{ stack_col }}, fill = {{ fill_col }}, group = {{ fill_col }})) +
geom_bar(stat = "identity", position = "stack", color = "white") +
scale_fill_manual(values = colors, guide = "none") +
labs(x = as_label(enquo(x_col)), y = as_label(enquo(stack_col)), fill = "Cell Type") +
theme_minimal()+
theme(panel.grid = element_blank(),
text = element_text(size = 18),
axis.title.x = element_blank())
return(p)
}
ggsave("stack_bar.plot.png", plot_stacked_bar(data = cell_data, x_col = Sample, stack_col = Count, fill_col = Type), width = 6, height = 6)
plot_stacked_bar <- function(data, x_col, stack_col, fill_col) {
# 对数据进行整理和计算比例
formatted_data <- data %>%
group_by({{ x_col }}) %>%
mutate(Total = sum({{ stack_col }})) %>%
mutate(Percentage = {{ stack_col }} / Total * 100)
# 配色方案
colors <- c("#0072B2", "#009E73", "#F0E442", "#D55E00")
# 绘制堆积柱形图
p <- ggplot(formatted_data, aes({{ x_col }}, {{ stack_col }}, fill = {{ fill_col }}, group = {{ fill_col }})) +
geom_bar(stat = "identity", position = "stack", color = "white") +
scale_fill_manual(values = colors, guide = "none") +
labs(x = as_label(enquo(x_col)), y = as_label(enquo(stack_col)), fill = "Cell Type") +
theme_minimal()+
theme(panel.grid = element_blank(),
text = element_text(size = 18),
axis.title.x = element_blank(),
axis.title.y = element_blank())
return(p)
}
ggsave("stack_bar.plot.png", plot_stacked_bar(data = cell_data, x_col = Sample, stack_col = Count, fill_col = Type), width = 6, height = 6)
gc()
setwd("../")
plot_stacked_bar <- function(data, x_col, stack_col, fill_col) {
# 对数据进行整理和计算比例
formatted_data <- data %>%
group_by({{ x_col }}) %>%
mutate(Total = sum({{ stack_col }})) %>%
mutate(Percentage = {{ stack_col }} / Total * 100)
# 配色方案
colors <- c("#0072B2", "#009E73", "#F0E442", "#D55E00")
# 绘制堆积柱形图
p <- ggplot(formatted_data, aes({{ x_col }}, {{ stack_col }}, fill = {{ fill_col }}, group = {{ fill_col }})) +
geom_bar(stat = "identity", position = "stack", color = "white") +
scale_fill_manual(values = colors, guide = "none") +
labs(x = as_label(enquo(x_col)), y = as_label(enquo(stack_col)), fill = "Cell Type") +
theme_minimal()+
theme(panel.grid = element_blank(),
text = element_text(size = 18),
axis.title.x = element_blank(),
axis.title.y = element_blank())
return(p)
}
?load_all
devtools::load_all()
devtools::load_all()
rm(plot_stacked_bar)
devtools::load_all()
plot_stacked_bar()
??plot_stacked_bar
?plot_stacked_bar
devtools::install_github("L7991-lian/CellOmicsR")
devtools::load_all()
??plot_stacked_bar
?plot_stacked_bar
getwd("../")
setwd("../")
usethis::use_package("magrittr")
devtools::document()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
devtools::install_github("L7991-lian/CellOmicsR")
devtools::load_all()
# input data: a data.frame
cell_data <- data.frame( Sample = rep(c("Sample1", "Sample2", "Sample3"), each = 4),Type = rep(c("Type1", "Type2", "Type3", "Type4"), 3),Count = c(10, 15, 8, 6, 5, 7, 12, 9, 3, 6, 4, 11))
head(cell_data)
# 对数据进行整理和计算比例
library(tidyverse)
formatted_data <- cell_data %>%
group_by({{ x_col }}) %>%
mutate(Total = sum({{ stack_col }})) %>%
mutate(Percentage = {{ stack_col }} / Total * 100)
# 对数据进行整理和计算比例
library(tidyverse)
formatted_data <- cell_data %>%
group_by({{ Sample }}) %>%
mutate(Total = sum({{ Count }})) %>%
mutate(Percentage = {{ Count }} / Total * 100)
# input data: a data.frame
cell_data <- data.frame(Sample = rep(c("Sample1", "Sample2", "Sample3"), each = 4),Type = rep(c("Type1", "Type2", "Type3", "Type4"), 3),Count = c(10, 15, 8, 6, 5, 7, 12, 9, 3, 6, 4, 11))
head(cell_data)
# 对数据进行整理和计算比例
library(tidyverse)
formatted_data <- cell_data %>%
group_by({{ Sample }}) %>%
mutate(Total = sum({{ Count }})) %>%
mutate(Percentage = {{ Count }} / Total * 100)
# 对数据进行整理和计算比例
library(tidyverse)
formatted_data <- cell_data %>%
group_by({{ Sample }}) %>%
mutate(Total = sum({{ Count }})) %>%
mutate(Percentage = {{ Count }} / Total * 100)
detach("package:CellOmicsR", unload=TRUE)
devtools::load_all()
setwd("./docs/")
setwd("../")
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
